diff --git a/dist/index.d.mts b/dist/index.d.mts
index 541b30a2b90de27d38d4a29ada55fc7b57d639d2..6e722346bb10fb66a5df07451b066a5a54ab5ce0 100644
--- a/dist/index.d.mts
+++ b/dist/index.d.mts
@@ -14,6 +14,9 @@ type AptabaseOptions = {
 
   // Override the default flush interval (in milliseconds)
   flushInterval?: number;
+
+  // Enable tracking for web platform (disabled by default)
+  enableWeb?: boolean;
 };
 
 /**
@@ -50,4 +53,4 @@ declare const _default: {
     dispose: typeof dispose;
 };
 
-export { AptabaseOptions, AptabaseProvider, _default as default, dispose, init, trackEvent, useAptabase };
+export { type AptabaseOptions, AptabaseProvider, _default as default, dispose, init, trackEvent, useAptabase };
diff --git a/dist/index.js b/dist/index.js
index 18c43f77ea122a2b483a70dfda5d7ed207957474..d27e5475f31c84da16e9c6b6d94780abc0c8326a 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,2 +1,2 @@
-var H=Object.defineProperty;var A=Object.getOwnPropertySymbols;var U=Object.prototype.hasOwnProperty,$=Object.prototype.propertyIsEnumerable;var S=(r,e,t)=>e in r?H(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,I=(r,e)=>{for(var t in e||(e={}))U.call(e,t)&&S(r,t,e[t]);if(A)for(var t of A(e))$.call(e,t)&&S(r,t,e[t]);return r};var i=(r,e,t)=>(S(r,typeof e!="symbol"?e+"":e,t),t);var E=(r,e,t)=>new Promise((s,u)=>{var a=o=>{try{c(t.next(o))}catch(b){u(b)}},p=o=>{try{c(t.throw(o))}catch(b){u(b)}},c=o=>o.done?s(o.value):Promise.resolve(o.value).then(a,p);c((t=t.apply(r,e)).next())});import{Platform as d}from"react-native";import{NativeModules as B}from"react-native";var{RNAptabaseModule:l}=B,O,P,V,w,C={appVersion:(P=(O=l==null?void 0:l.appVersion)==null?void 0:O.toString())!=null?P:"",appBuildNumber:(w=(V=l==null?void 0:l.appBuildNumber)==null?void 0:V.toString())!=null?w:""},_=C;var M="aptabase-reactnative@0.3.10";function T(){let[r,e]=j(),t="en-US";return{appVersion:_.appVersion,appBuildNumber:_.appBuildNumber,isDebug:__DEV__,locale:t,osName:r,osVersion:e,sdkVersion:M}}function j(){switch(d.OS){case"android":return["Android",d.constants.Release];case"ios":return d.isPad?["iPadOS",d.Version]:["iOS",d.Version];default:return["",""]}}import{AppState as D,Platform as L}from"react-native";var f=class{constructor(e,t,s){i(this,"_events",[]);i(this,"MAX_BATCH_SIZE",25);i(this,"headers");i(this,"apiUrl");this.apiUrl=`${t}/api/v0/events`,this.headers=new Headers({"Content-Type":"application/json","App-Key":e,"User-Agent":`${s.osName}/${s.osVersion} ${s.locale}`})}enqueue(e){if(Array.isArray(e)){this._events.push(...e);return}this._events.push(e)}flush(){return E(this,null,function*(){if(this._events.length===0)return Promise.resolve();let e=[];do{let t=this._events.splice(0,this.MAX_BATCH_SIZE);try{yield this._sendEvents(t)}catch(s){e=[...e,...t]}}while(this._events.length>0);e.length>0&&this.enqueue(e)})}_sendEvents(e){return E(this,null,function*(){try{let t=yield fetch(this.apiUrl,{method:"POST",headers:this.headers,credentials:"omit",body:JSON.stringify(e)});if(t.status<300)return Promise.resolve();let s=`${t.status} ${yield t.text()}`;if(t.status<500)return console.warn(`Aptabase: Failed to send ${e.length} events because of ${s}. Will not retry.`),Promise.resolve();throw new Error(s)}catch(t){throw console.error(`Aptabase: Failed to send ${e.length} events. Reason: ${t}`),t}})}};function y(){let r=Math.floor(Date.now()/1e3).toString(),e=Math.floor(Math.random()*1e8).toString().padStart(8,"0");return r+e}var x=__DEV__?2e3:6e4,m={US:"https://us.aptabase.com",EU:"https://eu.aptabase.com",DEV:"http://localhost:3000",SH:""};var h=class{constructor(e,t,s){i(this,"_dispatcher");i(this,"_env");i(this,"_sessionId",y());i(this,"_lastTouched",new Date);i(this,"_flushTimer");let[u,a]=e.split("-"),p=this.getBaseUrl(a,s);this._env=I({},t),s!=null&&s.appVersion&&(this._env.appVersion=s.appVersion),this._dispatcher=new f(e,p,t)}trackEvent(e,t){this._dispatcher.enqueue({timestamp:new Date().toISOString(),sessionId:this.evalSessionId(),eventName:e,systemProps:{isDebug:this._env.isDebug,locale:this._env.locale,osName:this._env.osName,osVersion:this._env.osVersion,appVersion:this._env.appVersion,appBuildNumber:this._env.appBuildNumber,sdkVersion:this._env.sdkVersion},props:t})}startPolling(e){this.stopPolling(),this._flushTimer=setInterval(this.flush.bind(this),e)}stopPolling(){this._flushTimer&&(clearInterval(this._flushTimer),this._flushTimer=void 0)}flush(){return this._dispatcher.flush()}evalSessionId(){let e=new Date;return e.getTime()-this._lastTouched.getTime()>36e5&&(this._sessionId=y()),this._lastTouched=e,this._sessionId}getBaseUrl(e,t){var s;return e==="SH"?(s=t==null?void 0:t.host)!=null?s:m.DEV:m[e]}};function N(r,e,t){if(r!=="android"&&r!=="ios")return[!1,"This SDK is only supported on Android and iOS"];let s=e.split("-");return s.length!==3||m[s[1]]===void 0?[!1,`App Key "${e}" is invalid`]:s[1]==="SH"&&!(t!=null&&t.host)?[!1,"Host parameter must be defined when using Self-Hosted App Key"]:[!0,""]}var n;function v(r,e){var p;let[t,s]=N(L.OS,r,e);if(!t){console.warn(`Aptabase: ${s}. Tracking will be disabled.`);return}let u=T();n=new h(r,u,e);let a=(p=e==null?void 0:e.flushInterval)!=null?p:x;n.startPolling(a),D.isAvailable&&D.addEventListener("change",c=>{n==null||n.flush(),c==="active"?n==null||n.startPolling(a):n==null||n.stopPolling()})}function k(){n?(n.stopPolling(),n=void 0):console.warn("Aptabase: dispose was called but SDK was not initialized.")}function g(r,e){if(e&&!F(e)){console.warn("Aptabase: trackEvent was called with invalid properties. The second parameter must be an object.");return}n==null||n.trackEvent(r,e)}var F=r=>typeof r=="object"&&r.constructor===Object;import{createContext as q,useEffect as K}from"react";import{jsx as z}from"react/jsx-runtime";var J=q({});function X({appKey:r,options:e,children:t}){return K(()=>{v(r,e)},[r,e]),z(J.Provider,{value:{},children:t})}function Z(){return{trackEvent:g}}var Ie={init:v,trackEvent:g,dispose:k};export{X as AptabaseProvider,Ie as default,k as dispose,v as init,g as trackEvent,Z as useAptabase};
+var B=Object.defineProperty;var P=Object.getOwnPropertySymbols;var C=Object.prototype.hasOwnProperty,W=Object.prototype.propertyIsEnumerable;var _=(s,e,t)=>e in s?B(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t,I=(s,e)=>{for(var t in e||(e={}))C.call(e,t)&&_(s,t,e[t]);if(P)for(var t of P(e))W.call(e,t)&&_(s,t,e[t]);return s};var i=(s,e,t)=>_(s,typeof e!="symbol"?e+"":e,t);var m=(s,e,t)=>new Promise((n,p)=>{var d=a=>{try{o(t.next(a))}catch(f){p(f)}},l=a=>{try{o(t.throw(a))}catch(f){p(f)}},o=a=>a.done?n(a.value):Promise.resolve(a.value).then(d,l);o((t=t.apply(s,e)).next())});import{Platform as c}from"react-native";import{Platform as R,NativeModules as M}from"react-native";var w,O,T,V,x;if(R.OS==="web")w={appVersion:"",appBuildNumber:""};else{let{RNAptabaseModule:s}=M;w={appVersion:(T=(O=s==null?void 0:s.appVersion)==null?void 0:O.toString())!=null?T:"",appBuildNumber:(x=(V=s==null?void 0:s.appBuildNumber)==null?void 0:V.toString())!=null?x:""}}var y=w;var j="aptabase-reactnative@0.3.10";function N(){let[s,e]=p();return{appVersion:y.appVersion,appBuildNumber:y.appBuildNumber,isDebug:__DEV__,locale:"en-US",osName:s,osVersion:e,sdkVersion:j};function p(){switch(c.OS){case"android":return["Android",c.constants.Release];case"ios":return c.isPad?["iPadOS",c.Version]:["iOS",c.Version];case"web":return["web",""];default:return["",""]}}}import{AppState as D,Platform as q}from"react-native";var h=class{constructor(e,t,n){i(this,"_events",[]);i(this,"MAX_BATCH_SIZE",25);i(this,"headers");i(this,"apiUrl");this.apiUrl=`${t}/api/v0/events`,this.headers=new Headers({"Content-Type":"application/json","App-Key":e,"User-Agent":`${n.osName}/${n.osVersion} ${n.locale}`})}flush(){return m(this,null,function*(){if(this._events.length===0)return Promise.resolve();let e=[];do{let t=this._events.splice(0,this.MAX_BATCH_SIZE);try{yield this._sendEvents(t)}catch(n){e=[...e,...t]}}while(this._events.length>0);e.length>0&&this.enqueue(e)})}_sendEvents(e){return m(this,null,function*(){try{let t=yield fetch(this.apiUrl,{method:"POST",headers:this.headers,credentials:"omit",body:JSON.stringify(e)});if(t.ok)return Promise.resolve();let n=`${t.status} ${yield t.text()}`;if(t.status<500)return console.warn(`Aptabase: Failed to send ${e.length} events because of ${n}. Will not retry.`),Promise.resolve();throw new Error(n)}catch(t){throw console.error(`Aptabase: Failed to send ${e.length} events. Reason: ${t}`),t}})}_sendEvent(e){return m(this,null,function*(){try{let t=yield fetch(this.apiUrl,{method:"POST",headers:this.headers,credentials:"omit",body:JSON.stringify(e)});if(t.ok)return Promise.resolve();let n=`${t.status} ${yield t.text()}`;if(t.status<500)return console.warn(`Aptabase: Failed to send event because of ${n}. Will not retry.`),Promise.resolve();throw new Error(n)}catch(t){throw console.error(`Aptabase: Failed to send event. Reason: ${t}`),t}})}},v=class extends h{constructor(e,t,n){super(e,t,n),this.apiUrl=`${t}/api/v0/event`,this.headers=new Headers({"Content-Type":"application/json","App-Key":e})}enqueue(e){Array.isArray(e)?e.forEach(t=>this._sendEvent(t)):this._sendEvent(e)}},b=class extends h{constructor(e,t,n){super(e,t,n),this.apiUrl=`${t}/api/v0/events`}enqueue(e){Array.isArray(e)?this._events.push(...e):this._events.push(e)}};function A(){let s=Math.floor(Date.now()/1e3).toString(),e=Math.floor(Math.random()*1e8).toString().padStart(8,"0");return s+e}var k=__DEV__?2e3:6e4,u={US:"https://us.aptabase.com",EU:"https://eu.aptabase.com",DEV:"http://localhost:3000",SH:""};var g=class{constructor(e,t,n){i(this,"_dispatcher");i(this,"_env");i(this,"_sessionId",A());i(this,"_lastTouched",new Date);i(this,"_flushTimer");let[p,d]=e.split("-"),l=this.getBaseUrl(d,n);this._env=I({},t),n!=null&&n.appVersion&&(this._env.appVersion=n.appVersion);let o=this._env.osName==="web",a=o&&(n==null?void 0:n.enableWeb)===!0,H=!o||a?o?new v(e,l,t):new b(e,l,t):null;this._dispatcher=H}trackEvent(e,t){if(!this._dispatcher)return;let n=this._env.osName==="web";this._dispatcher.enqueue({timestamp:new Date().toISOString(),sessionId:this.evalSessionId(),eventName:e,systemProps:{isDebug:this._env.isDebug,locale:this._env.locale,osName:n?void 0:this._env.osName,osVersion:n?void 0:this._env.osVersion,appVersion:this._env.appVersion,appBuildNumber:this._env.appBuildNumber,sdkVersion:this._env.sdkVersion},props:t})}startPolling(e){this.stopPolling(),this._flushTimer=setInterval(this.flush.bind(this),e)}stopPolling(){this._flushTimer&&(clearInterval(this._flushTimer),this._flushTimer=void 0)}flush(){return this._dispatcher?this._dispatcher.flush():Promise.resolve()}evalSessionId(){let e=new Date;return e.getTime()-this._lastTouched.getTime()>36e5&&(this._sessionId=A()),this._lastTouched=e,this._sessionId}getBaseUrl(e,t){var n;return e==="SH"?(n=t==null?void 0:t.host)!=null?n:u.DEV:u[e]}};var L=["android","ios","web"];function $(s,e,t){if(!L.includes(s))return[!1,"This SDK is only supported on Android, iOS and web"];let n=e.split("-");return n.length!==3||u[n[1]]===void 0?[!1,`App Key "${e}" is invalid`]:n[1]==="SH"&&!(t!=null&&t.host)?[!1,"Host parameter must be defined when using Self-Hosted App Key"]:(s==="web"&&!(t!=null&&t.enableWeb)&&console.warn("Aptabase: Web tracking is disabled by default. Set enableWeb: true in options to enable it."),[!0,""])}var r;function E(s,e){var l;let[t,n]=$(q.OS,s,e);if(!t){console.warn(`Aptabase: ${n}. Tracking will be disabled.`);return}let p=N();r=new g(s,p,e);let d=(l=e==null?void 0:e.flushInterval)!=null?l:k;r.startPolling(d),D.isAvailable&&D.addEventListener("change",o=>{r==null||r.flush(),o==="active"?r==null||r.startPolling(d):r==null||r.stopPolling()})}function U(){r?(r.stopPolling(),r=void 0):console.warn("Aptabase: dispose was called but SDK was not initialized.")}function S(s,e){if(e&&!J(e)){console.warn("Aptabase: trackEvent was called with invalid properties. The second parameter must be an object.");return}r==null||r.trackEvent(s,e)}var J=s=>typeof s=="object"&&s.constructor===Object;import{createContext as K,useEffect as X}from"react";import{jsx as Q}from"react/jsx-runtime";var Z=K({});function z({appKey:s,options:e,children:t}){return X(()=>{E(s,e)},[s,e]),Q(Z.Provider,{value:{},children:t})}function G(){return{trackEvent:S}}var Oe={init:E,trackEvent:S,dispose:U};export{z as AptabaseProvider,Oe as default,U as dispose,E as init,S as trackEvent,G as useAptabase};
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/dist/index.js.map b/dist/index.js.map
index d2954e095df6003c911afd6e240d98808c1aae94..adef17b28b650d47d69a65a031e47f17578c39e2 100644
--- a/dist/index.js.map
+++ b/dist/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../src/env.ts","../src/version.ts","../src/track.ts","../src/dispatcher.ts","../src/session.ts","../src/constants.ts","../src/client.ts","../src/validate.ts","../src/context.tsx","../src/index.ts"],"sourcesContent":["import { Platform } from \"react-native\";\nimport version from \"./version\";\n\n// env.PKG_VERSION is replaced by Vite during build phase\nconst sdkVersion = `aptabase-reactnative@${process.env.PKG_VERSION}`;\n\nexport interface EnvironmentInfo {\n  isDebug: boolean;\n  locale: string;\n  appVersion: string;\n  appBuildNumber: string;\n  sdkVersion: string;\n  osName: string;\n  osVersion: string;\n}\n\nexport function getEnvironmentInfo(): EnvironmentInfo {\n  const [osName, osVersion] = getOperatingSystem();\n\n  const locale = \"en-US\";\n\n  return {\n    appVersion: version.appVersion,\n    appBuildNumber: version.appBuildNumber,\n    isDebug: __DEV__,\n    locale,\n    osName,\n    osVersion,\n    sdkVersion,\n  };\n}\n\nfunction getOperatingSystem(): [string, string] {\n  switch (Platform.OS) {\n    case \"android\":\n      return [\"Android\", Platform.constants.Release];\n    case \"ios\":\n      if (Platform.isPad) {\n        return [\"iPadOS\", Platform.Version];\n      }\n      return [\"iOS\", Platform.Version];\n    default:\n      return [\"\", \"\"];\n  }\n}\n","import { NativeModules } from \"react-native\";\n\nconst { RNAptabaseModule } = NativeModules;\n\ntype VersionObject = {\n  appVersion: string;\n  appBuildNumber: string;\n};\n\nconst Version: VersionObject = {\n  appVersion: RNAptabaseModule?.appVersion?.toString() ?? \"\",\n  appBuildNumber: RNAptabaseModule?.appBuildNumber?.toString() ?? \"\",\n};\n\nexport default Version;\n","import type { AptabaseOptions } from \"./types\";\nimport { getEnvironmentInfo } from \"./env\";\nimport { AppState, Platform } from \"react-native\";\nimport { AptabaseClient } from \"./client\";\nimport { FLUSH_INTERVAL } from \"./constants\";\nimport { validate } from \"./validate\";\n\nlet _client: AptabaseClient | undefined;\n\n/**\n * Initializes the SDK with given App Key\n * @param {string} appKey - Aptabase App Key\n * @param {AptabaseOptions} options - Optional initialization parameters\n */\nexport function init(appKey: string, options?: AptabaseOptions) {\n  const [ok, msg] = validate(Platform.OS, appKey, options);\n  if (!ok) {\n    console.warn(`Aptabase: ${msg}. Tracking will be disabled.`);\n    return;\n  }\n\n  const env = getEnvironmentInfo();\n  _client = new AptabaseClient(appKey, env, options);\n\n  const flushInterval = options?.flushInterval ?? FLUSH_INTERVAL;\n  _client.startPolling(flushInterval);\n\n  if (!AppState.isAvailable) return;\n\n  AppState.addEventListener(\"change\", (next) => {\n    _client?.flush();\n\n    if (next === \"active\") {\n      _client?.startPolling(flushInterval);\n    } else {\n      _client?.stopPolling();\n    }\n  });\n}\n\n/**\n * Dispose the SDK and stop tracking events\n */\nexport function dispose() {\n  if (_client) {\n    _client.stopPolling();\n    _client = undefined;\n  } else {\n    console.warn(`Aptabase: dispose was called but SDK was not initialized.`);\n  }\n}\n\n/**\n * Track an event using given properties\n * @param {string} eventName - The name of the event to track\n * @param {Object} props - Optional custom properties\n */\nexport function trackEvent(\n  eventName: string,\n  props?: Record<string, string | number | boolean>\n) {\n  if (!!props && !isPlainObject(props)) {\n    console.warn(\n      `Aptabase: trackEvent was called with invalid properties. The second parameter must be an object.`\n    );\n    return;\n  }\n\n  _client?.trackEvent(eventName, props);\n}\n\nconst isPlainObject = (val: any) =>\n  typeof val === \"object\" && val.constructor === Object;\n","import type { Event } from \"./types\";\nimport { EnvironmentInfo } from \"./env\";\n\nexport class EventDispatcher {\n  private _events: Event[] = [];\n  private MAX_BATCH_SIZE = 25;\n  private headers: Headers;\n  private apiUrl: string;\n\n  constructor(appKey: string, baseUrl: string, env: EnvironmentInfo) {\n    this.apiUrl = `${baseUrl}/api/v0/events`;\n    this.headers = new Headers({\n      \"Content-Type\": \"application/json\",\n      \"App-Key\": appKey,\n      \"User-Agent\": `${env.osName}/${env.osVersion} ${env.locale}`,\n    });\n  }\n\n  public enqueue(evt: Event | Event[]) {\n    if (Array.isArray(evt)) {\n      this._events.push(...evt);\n      return;\n    }\n\n    this._events.push(evt);\n  }\n\n  public async flush(): Promise<void> {\n    if (this._events.length === 0) {\n      return Promise.resolve();\n    }\n\n    let failedEvents: Event[] = [];\n    do {\n      const eventsToSend = this._events.splice(0, this.MAX_BATCH_SIZE);\n      try {\n        await this._sendEvents(eventsToSend);\n      } catch {\n        failedEvents = [...failedEvents, ...eventsToSend];\n      }\n    } while (this._events.length > 0);\n\n    if (failedEvents.length > 0) {\n      this.enqueue(failedEvents);\n    }\n  }\n\n  private async _sendEvents(events: Event[]): Promise<void> {\n    try {\n      const res = await fetch(this.apiUrl, {\n        method: \"POST\",\n        headers: this.headers,\n        credentials: \"omit\",\n        body: JSON.stringify(events),\n      });\n\n      if (res.status < 300) {\n        return Promise.resolve();\n      }\n\n      const reason = `${res.status} ${await res.text()}`;\n      if (res.status < 500) {\n        console.warn(\n          `Aptabase: Failed to send ${events.length} events because of ${reason}. Will not retry.`\n        );\n        return Promise.resolve();\n      }\n\n      throw new Error(reason);\n    } catch (e) {\n      console.error(\n        `Aptabase: Failed to send ${events.length} events. Reason: ${e}`\n      );\n      throw e;\n    }\n  }\n}\n","export function newSessionId(): string {\n  const epochInSeconds = Math.floor(Date.now() / 1000).toString();\n  const random = Math.floor(Math.random() * 100000000)\n    .toString()\n    .padStart(8, \"0\");\n\n  return epochInSeconds + random;\n}\n","// Session expires after 1 hour of inactivity\nexport const SESSION_TIMEOUT = 60 * 60 * 1000;\n\n// Flush events every 60 seconds in production, or 2 seconds in development\nexport const FLUSH_INTERVAL = __DEV__ ? 2000 : 60000;\n\n// List of hosts for each region\n// To use a self-hosted (SH) deployment, the host must be set during init\nexport const HOSTS: { [region: string]: string } = {\n  US: \"https://us.aptabase.com\",\n  EU: \"https://eu.aptabase.com\",\n  DEV: \"http://localhost:3000\",\n  SH: \"\",\n};\n","import type { Platform } from \"react-native\";\nimport type { AptabaseOptions } from \"./types\";\nimport type { EnvironmentInfo } from \"./env\";\nimport { EventDispatcher } from \"./dispatcher\";\nimport { newSessionId } from \"./session\";\nimport { HOSTS, SESSION_TIMEOUT } from \"./constants\";\n\nexport class AptabaseClient {\n  private readonly _dispatcher: EventDispatcher;\n  private readonly _env: EnvironmentInfo;\n  private _sessionId = newSessionId();\n  private _lastTouched = new Date();\n  private _flushTimer: NodeJS.Timeout | undefined;\n\n  constructor(appKey: string, env: EnvironmentInfo, options?: AptabaseOptions) {\n    const [_, region] = appKey.split(\"-\");\n    const baseUrl = this.getBaseUrl(region, options);\n\n    this._env = { ...env };\n    if (options?.appVersion) {\n      this._env.appVersion = options.appVersion;\n    }\n\n    this._dispatcher = new EventDispatcher(appKey, baseUrl, env);\n  }\n\n  public trackEvent(\n    eventName: string,\n    props?: Record<string, string | number | boolean>\n  ) {\n    this._dispatcher.enqueue({\n      timestamp: new Date().toISOString(),\n      sessionId: this.evalSessionId(),\n      eventName: eventName,\n      systemProps: {\n        isDebug: this._env.isDebug,\n        locale: this._env.locale,\n        osName: this._env.osName,\n        osVersion: this._env.osVersion,\n        appVersion: this._env.appVersion,\n        appBuildNumber: this._env.appBuildNumber,\n        sdkVersion: this._env.sdkVersion,\n      },\n      props: props,\n    });\n  }\n\n  public startPolling(flushInterval: number) {\n    this.stopPolling();\n\n    this._flushTimer = setInterval(this.flush.bind(this), flushInterval);\n  }\n\n  public stopPolling() {\n    if (this._flushTimer) {\n      clearInterval(this._flushTimer);\n      this._flushTimer = undefined;\n    }\n  }\n\n  public flush(): Promise<void> {\n    return this._dispatcher.flush();\n  }\n\n  private evalSessionId() {\n    let now = new Date();\n    const diffInMs = now.getTime() - this._lastTouched.getTime();\n    if (diffInMs > SESSION_TIMEOUT) {\n      this._sessionId = newSessionId();\n    }\n    this._lastTouched = now;\n\n    return this._sessionId;\n  }\n\n  private getBaseUrl(region: string, options?: AptabaseOptions): string {\n    if (region === \"SH\") {\n      return options?.host ?? HOSTS.DEV;\n    }\n\n    return HOSTS[region];\n  }\n}\n","import type { Platform } from \"react-native\";\nimport { HOSTS } from \"./constants\";\n\nimport type { AptabaseOptions } from \"./types\";\n\nexport function validate(\n  platform: typeof Platform.OS,\n  appKey: string,\n  options?: AptabaseOptions\n): [boolean, string] {\n  if (platform !== \"android\" && platform !== \"ios\") {\n    return [false, \"This SDK is only supported on Android and iOS\"];\n  }\n\n  const parts = appKey.split(\"-\");\n  if (parts.length !== 3 || HOSTS[parts[1]] === undefined) {\n    return [false, `App Key \"${appKey}\" is invalid`];\n  }\n\n  if (parts[1] === \"SH\" && !options?.host) {\n    return [\n      false,\n      `Host parameter must be defined when using Self-Hosted App Key`,\n    ];\n  }\n\n  return [true, \"\"];\n}\n","import { init, trackEvent } from \"./track\";\nimport { createContext, useEffect, type ReactNode } from \"react\";\nimport { AptabaseOptions } from \"./types\";\n\ntype ContextProps = {};\n\nexport type AptabaseClient = {\n  trackEvent: typeof trackEvent;\n};\n\nconst AptabaseContext = createContext<ContextProps>({});\n\ntype Props = {\n  appKey: string;\n  options?: AptabaseOptions;\n  children: ReactNode;\n};\n\nexport function AptabaseProvider({ appKey, options, children }: Props) {\n  useEffect(() => {\n    init(appKey, options);\n  }, [appKey, options]);\n\n  return (\n    <AptabaseContext.Provider value={{}}>{children}</AptabaseContext.Provider>\n  );\n}\n\nexport function useAptabase(): AptabaseClient {\n  return { trackEvent };\n}\n","export type { AptabaseOptions } from \"./types\";\nexport { AptabaseProvider, useAptabase } from \"./context\";\nimport { init, trackEvent, dispose } from \"./track\";\nexport { init, trackEvent, dispose };\n\nexport default { init, trackEvent, dispose };\n"],"mappings":"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","names":["Platform","NativeModules","RNAptabaseModule","_a","_b","_c","_d","Version","version_default","sdkVersion","getEnvironmentInfo","osName","osVersion","getOperatingSystem","locale","version_default","Platform","AppState","Platform","EventDispatcher","appKey","baseUrl","env","__publicField","evt","__async","failedEvents","eventsToSend","e","events","res","reason","newSessionId","epochInSeconds","random","FLUSH_INTERVAL","HOSTS","AptabaseClient","appKey","env","options","__publicField","newSessionId","_","region","baseUrl","__spreadValues","EventDispatcher","eventName","props","flushInterval","now","_a","HOSTS","validate","platform","appKey","options","parts","HOSTS","_client","init","appKey","options","_a","ok","msg","validate","Platform","env","getEnvironmentInfo","AptabaseClient","flushInterval","FLUSH_INTERVAL","AppState","next","dispose","trackEvent","eventName","props","isPlainObject","val","createContext","useEffect","jsx","AptabaseContext","AptabaseProvider","appKey","options","children","init","useAptabase","trackEvent","src_default","init","trackEvent","dispose"]}
\ No newline at end of file
+{"version":3,"sources":["../src/env.ts","../src/version.ts","../src/track.ts","../src/dispatcher.ts","../src/session.ts","../src/constants.ts","../src/client.ts","../src/validate.ts","../src/context.tsx","../src/index.ts"],"sourcesContent":["import { Platform } from \"react-native\";\nimport version from \"./version\";\n\n// env.PKG_VERSION is replaced by Vite during build phase\nconst sdkVersion = `aptabase-reactnative@${process.env.PKG_VERSION}`;\n\nexport interface EnvironmentInfo {\n  isDebug: boolean;\n  locale: string;\n  appVersion: string;\n  appBuildNumber: string;\n  sdkVersion: string;\n  osName: string | undefined;\n  osVersion: string | undefined;\n}\n\nexport function getEnvironmentInfo(): EnvironmentInfo {\n  const [osName, osVersion] = getOperatingSystem();\n\n  const locale = \"en-US\";\n\n  const envInfo: EnvironmentInfo = {\n    appVersion: version.appVersion,\n    appBuildNumber: version.appBuildNumber,\n    isDebug: __DEV__,\n    locale,\n    osName: osName,\n    osVersion: osVersion,\n    sdkVersion,\n  };\n\n  return envInfo;\n\n  function getOperatingSystem(): [string, string] {\n    switch (Platform.OS) {\n      case \"android\":\n        return [\"Android\", Platform.constants.Release];\n      case \"ios\":\n        if (Platform.isPad) {\n          return [\"iPadOS\", Platform.Version];\n        }\n        return [\"iOS\", Platform.Version];\n      case \"web\":\n        return [\"web\", \"\"];\n      default:\n        return [\"\", \"\"];\n    }\n  }\n}\n","import { Platform, NativeModules } from \"react-native\";\n\ntype VersionObject = {\n  appVersion: string;\n  appBuildNumber: string;\n};\n\nlet Version: VersionObject;\n\nif (Platform.OS === \"web\") {\n  Version = {\n    appVersion: \"\", // can be overrided in AptabaseOptions\n    appBuildNumber: \"\",\n  };\n} else {\n  const { RNAptabaseModule } = NativeModules;\n  Version = {\n    appVersion: RNAptabaseModule?.appVersion?.toString() ?? \"\",\n    appBuildNumber: RNAptabaseModule?.appBuildNumber?.toString() ?? \"\",\n  };\n}\n\nexport default Version;\n","import type { AptabaseOptions } from \"./types\";\nimport { getEnvironmentInfo } from \"./env\";\nimport { AppState, Platform } from \"react-native\";\nimport { AptabaseClient } from \"./client\";\nimport { FLUSH_INTERVAL } from \"./constants\";\nimport { validate } from \"./validate\";\n\nlet _client: AptabaseClient | undefined;\n\n/**\n * Initializes the SDK with given App Key\n * @param {string} appKey - Aptabase App Key\n * @param {AptabaseOptions} options - Optional initialization parameters\n */\nexport function init(appKey: string, options?: AptabaseOptions) {\n  const [ok, msg] = validate(Platform.OS, appKey, options);\n  if (!ok) {\n    console.warn(`Aptabase: ${msg}. Tracking will be disabled.`);\n    return;\n  }\n\n  const env = getEnvironmentInfo();\n  _client = new AptabaseClient(appKey, env, options);\n\n  const flushInterval = options?.flushInterval ?? FLUSH_INTERVAL;\n  _client.startPolling(flushInterval);\n\n  if (!AppState.isAvailable) return;\n\n  AppState.addEventListener(\"change\", (next) => {\n    _client?.flush();\n\n    if (next === \"active\") {\n      _client?.startPolling(flushInterval);\n    } else {\n      _client?.stopPolling();\n    }\n  });\n}\n\n/**\n * Dispose the SDK and stop tracking events\n */\nexport function dispose() {\n  if (_client) {\n    _client.stopPolling();\n    _client = undefined;\n  } else {\n    console.warn(`Aptabase: dispose was called but SDK was not initialized.`);\n  }\n}\n\n/**\n * Track an event using given properties\n * @param {string} eventName - The name of the event to track\n * @param {Object} props - Optional custom properties\n */\nexport function trackEvent(\n  eventName: string,\n  props?: Record<string, string | number | boolean>\n) {\n  if (!!props && !isPlainObject(props)) {\n    console.warn(\n      `Aptabase: trackEvent was called with invalid properties. The second parameter must be an object.`\n    );\n    return;\n  }\n\n  _client?.trackEvent(eventName, props);\n}\n\nconst isPlainObject = (val: any) =>\n  typeof val === \"object\" && val.constructor === Object;\n","import type { Event } from \"./types\";\nimport type { EnvironmentInfo } from \"./env\";\n\nexport abstract class EventDispatcher {\n  protected _events: Event[] = [];\n  protected MAX_BATCH_SIZE = 25;\n  protected headers: Headers;\n  protected apiUrl: string;\n\n  constructor(appKey: string, baseUrl: string, env: EnvironmentInfo) {\n    this.apiUrl = `${baseUrl}/api/v0/events`;\n    this.headers = new Headers({\n      \"Content-Type\": \"application/json\",\n      \"App-Key\": appKey,\n      \"User-Agent\": `${env.osName}/${env.osVersion} ${env.locale}`,\n    });\n  }\n\n  public abstract enqueue(evt: Event | Event[]): void;\n\n  public async flush(): Promise<void> {\n    if (this._events.length === 0) {\n      return Promise.resolve();\n    }\n\n    let failedEvents: Event[] = [];\n    do {\n      const eventsToSend = this._events.splice(0, this.MAX_BATCH_SIZE);\n      try {\n        await this._sendEvents(eventsToSend);\n      } catch {\n        failedEvents = [...failedEvents, ...eventsToSend];\n      }\n    } while (this._events.length > 0);\n\n    if (failedEvents.length > 0) {\n      this.enqueue(failedEvents);\n    }\n  }\n\n  protected async _sendEvents(events: Event[]): Promise<void> {\n    try {\n      const res = await fetch(this.apiUrl, {\n        method: \"POST\",\n        headers: this.headers,\n        credentials: \"omit\",\n        body: JSON.stringify(events),\n      });\n\n      if (res.ok) {\n        return Promise.resolve();\n      }\n\n      const reason = `${res.status} ${await res.text()}`;\n      if (res.status < 500) {\n        console.warn(\n          `Aptabase: Failed to send ${events.length} events because of ${reason}. Will not retry.`\n        );\n        return Promise.resolve();\n      }\n\n      throw new Error(reason);\n    } catch (e) {\n      console.error(\n        `Aptabase: Failed to send ${events.length} events. Reason: ${e}`\n      );\n      throw e;\n    }\n  }\n\n  protected async _sendEvent(event: Event): Promise<void> {\n    try {\n      const res = await fetch(this.apiUrl, {\n        method: \"POST\",\n        headers: this.headers,\n        credentials: \"omit\",\n        body: JSON.stringify(event),\n      });\n\n      if (res.ok) {\n        return Promise.resolve();\n      }\n\n      const reason = `${res.status} ${await res.text()}`;\n      if (res.status < 500) {\n        console.warn(\n          `Aptabase: Failed to send event because of ${reason}. Will not retry.`\n        );\n        return Promise.resolve();\n      }\n\n      throw new Error(reason);\n    } catch (e) {\n      console.error(`Aptabase: Failed to send event. Reason: ${e}`);\n      throw e;\n    }\n  }\n}\n\nexport class WebEventDispatcher extends EventDispatcher {\n  constructor(appKey: string, baseUrl: string, env: EnvironmentInfo) {\n    super(appKey, baseUrl, env);\n    this.apiUrl = `${baseUrl}/api/v0/event`;\n    this.headers = new Headers({\n      \"Content-Type\": \"application/json\",\n      \"App-Key\": appKey,\n      // No User-Agent header for web\n    });\n  }\n\n  public enqueue(evt: Event | Event[]): void {\n    if (Array.isArray(evt)) {\n      evt.forEach((event) => this._sendEvent(event));\n    } else {\n      this._sendEvent(evt);\n    }\n  }\n}\n\nexport class NativeEventDispatcher extends EventDispatcher {\n  constructor(appKey: string, baseUrl: string, env: EnvironmentInfo) {\n    super(appKey, baseUrl, env);\n    this.apiUrl = `${baseUrl}/api/v0/events`;\n  }\n\n  public enqueue(evt: Event | Event[]): void {\n    if (Array.isArray(evt)) {\n      this._events.push(...evt);\n    } else {\n      this._events.push(evt);\n    }\n  }\n}\n","export function newSessionId(): string {\n  const epochInSeconds = Math.floor(Date.now() / 1000).toString();\n  const random = Math.floor(Math.random() * 100000000)\n    .toString()\n    .padStart(8, \"0\");\n\n  return epochInSeconds + random;\n}\n","// Session expires after 1 hour of inactivity\nexport const SESSION_TIMEOUT = 60 * 60 * 1000;\n\n// Flush events every 60 seconds in production, or 2 seconds in development\nexport const FLUSH_INTERVAL = __DEV__ ? 2000 : 60000;\n\n// List of hosts for each region\n// To use a self-hosted (SH) deployment, the host must be set during init\nexport const HOSTS: { [region: string]: string } = {\n  US: \"https://us.aptabase.com\",\n  EU: \"https://eu.aptabase.com\",\n  DEV: \"http://localhost:3000\",\n  SH: \"\",\n};\n","import type { AptabaseOptions } from \"./types\";\nimport type { EnvironmentInfo } from \"./env\";\nimport { NativeEventDispatcher, WebEventDispatcher } from \"./dispatcher\";\nimport { newSessionId } from \"./session\";\nimport { HOSTS, SESSION_TIMEOUT } from \"./constants\";\n\nexport class AptabaseClient {\n  private readonly _dispatcher:\n    | WebEventDispatcher\n    | NativeEventDispatcher\n    | null;\n  private readonly _env: EnvironmentInfo;\n  private _sessionId = newSessionId();\n  private _lastTouched = new Date();\n  private _flushTimer: NodeJS.Timeout | undefined;\n\n  constructor(appKey: string, env: EnvironmentInfo, options?: AptabaseOptions) {\n    const [_, region] = appKey.split(\"-\");\n    const baseUrl = this.getBaseUrl(region, options);\n\n    this._env = { ...env };\n    if (options?.appVersion) {\n      this._env.appVersion = options.appVersion;\n    }\n\n    const isWeb = this._env.osName === \"web\";\n    const isWebTrackingEnabled = isWeb && options?.enableWeb === true;\n\n    const shouldEnableTracking = !isWeb || isWebTrackingEnabled;\n    const dispatcher = shouldEnableTracking\n      ? isWeb\n        ? new WebEventDispatcher(appKey, baseUrl, env)\n        : new NativeEventDispatcher(appKey, baseUrl, env)\n      : null;\n\n    this._dispatcher = dispatcher;\n  }\n\n  public trackEvent(\n    eventName: string,\n    props?: Record<string, string | number | boolean>\n  ) {\n    if (!this._dispatcher) return;\n\n    const isWeb = this._env.osName === \"web\";\n\n    this._dispatcher.enqueue({\n      timestamp: new Date().toISOString(),\n      sessionId: this.evalSessionId(),\n      eventName: eventName,\n      systemProps: {\n        isDebug: this._env.isDebug,\n        locale: this._env.locale,\n        osName: isWeb ? undefined : this._env.osName,\n        osVersion: isWeb ? undefined : this._env.osVersion,\n        appVersion: this._env.appVersion,\n        appBuildNumber: this._env.appBuildNumber,\n        sdkVersion: this._env.sdkVersion,\n      },\n      props: props,\n    });\n  }\n\n  public startPolling(flushInterval: number) {\n    this.stopPolling();\n\n    this._flushTimer = setInterval(this.flush.bind(this), flushInterval);\n  }\n\n  public stopPolling() {\n    if (this._flushTimer) {\n      clearInterval(this._flushTimer);\n      this._flushTimer = undefined;\n    }\n  }\n\n  public flush(): Promise<void> {\n    if (!this._dispatcher) return Promise.resolve();\n    return this._dispatcher.flush();\n  }\n\n  private evalSessionId() {\n    let now = new Date();\n    const diffInMs = now.getTime() - this._lastTouched.getTime();\n    if (diffInMs > SESSION_TIMEOUT) {\n      this._sessionId = newSessionId();\n    }\n    this._lastTouched = now;\n\n    return this._sessionId;\n  }\n\n  private getBaseUrl(region: string, options?: AptabaseOptions): string {\n    if (region === \"SH\") {\n      return options?.host ?? HOSTS.DEV;\n    }\n\n    return HOSTS[region];\n  }\n}\n","import type { Platform } from \"react-native\";\nimport { HOSTS } from \"./constants\";\n\nimport type { AptabaseOptions } from \"./types\";\n\nconst SUPPORTED_PLATFORMS = [\"android\", \"ios\", \"web\"];\n\nexport function validate(\n  platform: typeof Platform.OS,\n  appKey: string,\n  options?: AptabaseOptions\n): [boolean, string] {\n  if (!SUPPORTED_PLATFORMS.includes(platform)) {\n    return [false, \"This SDK is only supported on Android, iOS and web\"];\n  }\n\n  const parts = appKey.split(\"-\");\n  if (parts.length !== 3 || HOSTS[parts[1]] === undefined) {\n    return [false, `App Key \"${appKey}\" is invalid`];\n  }\n\n  if (parts[1] === \"SH\" && !options?.host) {\n    return [\n      false,\n      `Host parameter must be defined when using Self-Hosted App Key`,\n    ];\n  }\n\n  // If platform is web but web tracking is not enabled, log a warning\n  if (platform === \"web\" && !options?.enableWeb) {\n    console.warn(\n      \"Aptabase: Web tracking is disabled by default. Set enableWeb: true in options to enable it.\"\n    );\n  }\n\n  return [true, \"\"];\n}\n","import { init, trackEvent } from \"./track\";\nimport { createContext, useEffect, type ReactNode } from \"react\";\nimport { AptabaseOptions } from \"./types\";\n\ntype ContextProps = {};\n\nexport type AptabaseClient = {\n  trackEvent: typeof trackEvent;\n};\n\nconst AptabaseContext = createContext<ContextProps>({});\n\ntype Props = {\n  appKey: string;\n  options?: AptabaseOptions;\n  children: ReactNode;\n};\n\nexport function AptabaseProvider({ appKey, options, children }: Props) {\n  useEffect(() => {\n    init(appKey, options);\n  }, [appKey, options]);\n\n  return (\n    <AptabaseContext.Provider value={{}}>{children}</AptabaseContext.Provider>\n  );\n}\n\nexport function useAptabase(): AptabaseClient {\n  return { trackEvent };\n}\n","export type { AptabaseOptions } from \"./types\";\nexport { AptabaseProvider, useAptabase } from \"./context\";\nimport { init, trackEvent, dispose } from \"./track\";\nexport { init, trackEvent, dispose };\n\nexport default { init, trackEvent, dispose };\n"],"mappings":"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","names":["Platform","Platform","NativeModules","Version","_a","_b","_c","_d","RNAptabaseModule","version_default","sdkVersion","getEnvironmentInfo","osName","osVersion","getOperatingSystem","version_default","Platform","AppState","Platform","EventDispatcher","appKey","baseUrl","env","__publicField","__async","failedEvents","eventsToSend","e","events","res","reason","event","WebEventDispatcher","evt","NativeEventDispatcher","newSessionId","epochInSeconds","random","FLUSH_INTERVAL","HOSTS","AptabaseClient","appKey","env","options","__publicField","newSessionId","_","region","baseUrl","__spreadValues","isWeb","isWebTrackingEnabled","dispatcher","WebEventDispatcher","NativeEventDispatcher","eventName","props","flushInterval","now","_a","HOSTS","SUPPORTED_PLATFORMS","validate","platform","appKey","options","parts","HOSTS","_client","init","appKey","options","_a","ok","msg","validate","Platform","env","getEnvironmentInfo","AptabaseClient","flushInterval","FLUSH_INTERVAL","AppState","next","dispose","trackEvent","eventName","props","isPlainObject","val","createContext","useEffect","jsx","AptabaseContext","AptabaseProvider","appKey","options","children","init","useAptabase","trackEvent","index_default","init","trackEvent","dispose"]}
\ No newline at end of file
